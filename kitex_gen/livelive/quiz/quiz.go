// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package quiz

import (
	"LiveLive/kitex_gen/livelive/base"
	"context"
	"fmt"
)

type PublishChoiceQuestionReq struct {
	TeacherId int64    `thrift:"teacher_id,1" frugal:"1,default,i64" json:"teacher_id"`
	CourseId  int64    `thrift:"course_id,2" frugal:"2,default,i64" json:"course_id"`
	Title     string   `thrift:"title,3" frugal:"3,default,string" json:"title"`
	Options   []string `thrift:"options,4" frugal:"4,default,list<string>" json:"options"`
	Answer    int8     `thrift:"answer,5" frugal:"5,default,i8" json:"answer"`
	Deadline  int64    `thrift:"deadline,6" frugal:"6,default,i64" json:"deadline"`
}

func NewPublishChoiceQuestionReq() *PublishChoiceQuestionReq {
	return &PublishChoiceQuestionReq{}
}

func (p *PublishChoiceQuestionReq) InitDefault() {
}

func (p *PublishChoiceQuestionReq) GetTeacherId() (v int64) {
	return p.TeacherId
}

func (p *PublishChoiceQuestionReq) GetCourseId() (v int64) {
	return p.CourseId
}

func (p *PublishChoiceQuestionReq) GetTitle() (v string) {
	return p.Title
}

func (p *PublishChoiceQuestionReq) GetOptions() (v []string) {
	return p.Options
}

func (p *PublishChoiceQuestionReq) GetAnswer() (v int8) {
	return p.Answer
}

func (p *PublishChoiceQuestionReq) GetDeadline() (v int64) {
	return p.Deadline
}
func (p *PublishChoiceQuestionReq) SetTeacherId(val int64) {
	p.TeacherId = val
}
func (p *PublishChoiceQuestionReq) SetCourseId(val int64) {
	p.CourseId = val
}
func (p *PublishChoiceQuestionReq) SetTitle(val string) {
	p.Title = val
}
func (p *PublishChoiceQuestionReq) SetOptions(val []string) {
	p.Options = val
}
func (p *PublishChoiceQuestionReq) SetAnswer(val int8) {
	p.Answer = val
}
func (p *PublishChoiceQuestionReq) SetDeadline(val int64) {
	p.Deadline = val
}

func (p *PublishChoiceQuestionReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublishChoiceQuestionReq(%+v)", *p)
}

var fieldIDToName_PublishChoiceQuestionReq = map[int16]string{
	1: "teacher_id",
	2: "course_id",
	3: "title",
	4: "options",
	5: "answer",
	6: "deadline",
}

type PublishChoiceQuestionResp struct {
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewPublishChoiceQuestionResp() *PublishChoiceQuestionResp {
	return &PublishChoiceQuestionResp{}
}

func (p *PublishChoiceQuestionResp) InitDefault() {
}

var PublishChoiceQuestionResp_BaseResp_DEFAULT *base.BaseResp

func (p *PublishChoiceQuestionResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return PublishChoiceQuestionResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *PublishChoiceQuestionResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *PublishChoiceQuestionResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *PublishChoiceQuestionResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublishChoiceQuestionResp(%+v)", *p)
}

var fieldIDToName_PublishChoiceQuestionResp = map[int16]string{
	255: "baseResp",
}

type QuizService interface {
	PublishChoiceQuestion(ctx context.Context, req *PublishChoiceQuestionReq) (r *PublishChoiceQuestionResp, err error)
}

type QuizServicePublishChoiceQuestionArgs struct {
	Req *PublishChoiceQuestionReq `thrift:"req,1" frugal:"1,default,PublishChoiceQuestionReq" json:"req"`
}

func NewQuizServicePublishChoiceQuestionArgs() *QuizServicePublishChoiceQuestionArgs {
	return &QuizServicePublishChoiceQuestionArgs{}
}

func (p *QuizServicePublishChoiceQuestionArgs) InitDefault() {
}

var QuizServicePublishChoiceQuestionArgs_Req_DEFAULT *PublishChoiceQuestionReq

func (p *QuizServicePublishChoiceQuestionArgs) GetReq() (v *PublishChoiceQuestionReq) {
	if !p.IsSetReq() {
		return QuizServicePublishChoiceQuestionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *QuizServicePublishChoiceQuestionArgs) SetReq(val *PublishChoiceQuestionReq) {
	p.Req = val
}

func (p *QuizServicePublishChoiceQuestionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QuizServicePublishChoiceQuestionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuizServicePublishChoiceQuestionArgs(%+v)", *p)
}

var fieldIDToName_QuizServicePublishChoiceQuestionArgs = map[int16]string{
	1: "req",
}

type QuizServicePublishChoiceQuestionResult struct {
	Success *PublishChoiceQuestionResp `thrift:"success,0,optional" frugal:"0,optional,PublishChoiceQuestionResp" json:"success,omitempty"`
}

func NewQuizServicePublishChoiceQuestionResult() *QuizServicePublishChoiceQuestionResult {
	return &QuizServicePublishChoiceQuestionResult{}
}

func (p *QuizServicePublishChoiceQuestionResult) InitDefault() {
}

var QuizServicePublishChoiceQuestionResult_Success_DEFAULT *PublishChoiceQuestionResp

func (p *QuizServicePublishChoiceQuestionResult) GetSuccess() (v *PublishChoiceQuestionResp) {
	if !p.IsSetSuccess() {
		return QuizServicePublishChoiceQuestionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *QuizServicePublishChoiceQuestionResult) SetSuccess(x interface{}) {
	p.Success = x.(*PublishChoiceQuestionResp)
}

func (p *QuizServicePublishChoiceQuestionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QuizServicePublishChoiceQuestionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuizServicePublishChoiceQuestionResult(%+v)", *p)
}

var fieldIDToName_QuizServicePublishChoiceQuestionResult = map[int16]string{
	0: "success",
}
