// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package user

import (
	"LiveLive/kitex_gen/livelive/base"
	"context"
	"fmt"
)

type RegisterReq struct {
	Username string `thrift:"username,1" frugal:"1,default,string" json:"username"`
	Password string `thrift:"password,2" frugal:"2,default,string" json:"password"`
}

func NewRegisterReq() *RegisterReq {
	return &RegisterReq{}
}

func (p *RegisterReq) InitDefault() {
}

func (p *RegisterReq) GetUsername() (v string) {
	return p.Username
}

func (p *RegisterReq) GetPassword() (v string) {
	return p.Password
}
func (p *RegisterReq) SetUsername(val string) {
	p.Username = val
}
func (p *RegisterReq) SetPassword(val string) {
	p.Password = val
}

func (p *RegisterReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterReq(%+v)", *p)
}

var fieldIDToName_RegisterReq = map[int16]string{
	1: "username",
	2: "password",
}

type RegisterResp struct {
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewRegisterResp() *RegisterResp {
	return &RegisterResp{}
}

func (p *RegisterResp) InitDefault() {
}

var RegisterResp_BaseResp_DEFAULT *base.BaseResp

func (p *RegisterResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return RegisterResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *RegisterResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *RegisterResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *RegisterResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterResp(%+v)", *p)
}

var fieldIDToName_RegisterResp = map[int16]string{
	255: "baseResp",
}

type LoginReq struct {
	Username string `thrift:"username,1" frugal:"1,default,string" json:"username"`
	Password string `thrift:"password,2" frugal:"2,default,string" json:"password"`
}

func NewLoginReq() *LoginReq {
	return &LoginReq{}
}

func (p *LoginReq) InitDefault() {
}

func (p *LoginReq) GetUsername() (v string) {
	return p.Username
}

func (p *LoginReq) GetPassword() (v string) {
	return p.Password
}
func (p *LoginReq) SetUsername(val string) {
	p.Username = val
}
func (p *LoginReq) SetPassword(val string) {
	p.Password = val
}

func (p *LoginReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginReq(%+v)", *p)
}

var fieldIDToName_LoginReq = map[int16]string{
	1: "username",
	2: "password",
}

type LoginResp struct {
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewLoginResp() *LoginResp {
	return &LoginResp{}
}

func (p *LoginResp) InitDefault() {
}

var LoginResp_BaseResp_DEFAULT *base.BaseResp

func (p *LoginResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return LoginResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *LoginResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *LoginResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *LoginResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResp(%+v)", *p)
}

var fieldIDToName_LoginResp = map[int16]string{
	255: "baseResp",
}

type UserInfoReq struct {
	Username string `thrift:"username,1" frugal:"1,default,string" json:"username"`
}

func NewUserInfoReq() *UserInfoReq {
	return &UserInfoReq{}
}

func (p *UserInfoReq) InitDefault() {
}

func (p *UserInfoReq) GetUsername() (v string) {
	return p.Username
}
func (p *UserInfoReq) SetUsername(val string) {
	p.Username = val
}

func (p *UserInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoReq(%+v)", *p)
}

var fieldIDToName_UserInfoReq = map[int16]string{
	1: "username",
}

type UserInfoResp struct {
	Username string         `thrift:"username,1" frugal:"1,default,string" json:"username"`
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewUserInfoResp() *UserInfoResp {
	return &UserInfoResp{}
}

func (p *UserInfoResp) InitDefault() {
}

func (p *UserInfoResp) GetUsername() (v string) {
	return p.Username
}

var UserInfoResp_BaseResp_DEFAULT *base.BaseResp

func (p *UserInfoResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return UserInfoResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UserInfoResp) SetUsername(val string) {
	p.Username = val
}
func (p *UserInfoResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *UserInfoResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UserInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoResp(%+v)", *p)
}

var fieldIDToName_UserInfoResp = map[int16]string{
	1:   "username",
	255: "baseResp",
}

type UserService interface {
	Register(ctx context.Context, req *RegisterReq) (r *RegisterResp, err error)

	Login(ctx context.Context, req *LoginReq) (r *LoginResp, err error)

	UserInfo(ctx context.Context, req *UserInfoReq) (r *UserInfoResp, err error)
}

type UserServiceRegisterArgs struct {
	Req *RegisterReq `thrift:"req,1" frugal:"1,default,RegisterReq" json:"req"`
}

func NewUserServiceRegisterArgs() *UserServiceRegisterArgs {
	return &UserServiceRegisterArgs{}
}

func (p *UserServiceRegisterArgs) InitDefault() {
}

var UserServiceRegisterArgs_Req_DEFAULT *RegisterReq

func (p *UserServiceRegisterArgs) GetReq() (v *RegisterReq) {
	if !p.IsSetReq() {
		return UserServiceRegisterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceRegisterArgs) SetReq(val *RegisterReq) {
	p.Req = val
}

func (p *UserServiceRegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterArgs(%+v)", *p)
}

var fieldIDToName_UserServiceRegisterArgs = map[int16]string{
	1: "req",
}

type UserServiceRegisterResult struct {
	Success *RegisterResp `thrift:"success,0,optional" frugal:"0,optional,RegisterResp" json:"success,omitempty"`
}

func NewUserServiceRegisterResult() *UserServiceRegisterResult {
	return &UserServiceRegisterResult{}
}

func (p *UserServiceRegisterResult) InitDefault() {
}

var UserServiceRegisterResult_Success_DEFAULT *RegisterResp

func (p *UserServiceRegisterResult) GetSuccess() (v *RegisterResp) {
	if !p.IsSetSuccess() {
		return UserServiceRegisterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceRegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*RegisterResp)
}

func (p *UserServiceRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterResult(%+v)", *p)
}

var fieldIDToName_UserServiceRegisterResult = map[int16]string{
	0: "success",
}

type UserServiceLoginArgs struct {
	Req *LoginReq `thrift:"req,1" frugal:"1,default,LoginReq" json:"req"`
}

func NewUserServiceLoginArgs() *UserServiceLoginArgs {
	return &UserServiceLoginArgs{}
}

func (p *UserServiceLoginArgs) InitDefault() {
}

var UserServiceLoginArgs_Req_DEFAULT *LoginReq

func (p *UserServiceLoginArgs) GetReq() (v *LoginReq) {
	if !p.IsSetReq() {
		return UserServiceLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceLoginArgs) SetReq(val *LoginReq) {
	p.Req = val
}

func (p *UserServiceLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginArgs(%+v)", *p)
}

var fieldIDToName_UserServiceLoginArgs = map[int16]string{
	1: "req",
}

type UserServiceLoginResult struct {
	Success *LoginResp `thrift:"success,0,optional" frugal:"0,optional,LoginResp" json:"success,omitempty"`
}

func NewUserServiceLoginResult() *UserServiceLoginResult {
	return &UserServiceLoginResult{}
}

func (p *UserServiceLoginResult) InitDefault() {
}

var UserServiceLoginResult_Success_DEFAULT *LoginResp

func (p *UserServiceLoginResult) GetSuccess() (v *LoginResp) {
	if !p.IsSetSuccess() {
		return UserServiceLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginResp)
}

func (p *UserServiceLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginResult(%+v)", *p)
}

var fieldIDToName_UserServiceLoginResult = map[int16]string{
	0: "success",
}

type UserServiceUserInfoArgs struct {
	Req *UserInfoReq `thrift:"req,1" frugal:"1,default,UserInfoReq" json:"req"`
}

func NewUserServiceUserInfoArgs() *UserServiceUserInfoArgs {
	return &UserServiceUserInfoArgs{}
}

func (p *UserServiceUserInfoArgs) InitDefault() {
}

var UserServiceUserInfoArgs_Req_DEFAULT *UserInfoReq

func (p *UserServiceUserInfoArgs) GetReq() (v *UserInfoReq) {
	if !p.IsSetReq() {
		return UserServiceUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUserInfoArgs) SetReq(val *UserInfoReq) {
	p.Req = val
}

func (p *UserServiceUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserInfoArgs(%+v)", *p)
}

var fieldIDToName_UserServiceUserInfoArgs = map[int16]string{
	1: "req",
}

type UserServiceUserInfoResult struct {
	Success *UserInfoResp `thrift:"success,0,optional" frugal:"0,optional,UserInfoResp" json:"success,omitempty"`
}

func NewUserServiceUserInfoResult() *UserServiceUserInfoResult {
	return &UserServiceUserInfoResult{}
}

func (p *UserServiceUserInfoResult) InitDefault() {
}

var UserServiceUserInfoResult_Success_DEFAULT *UserInfoResp

func (p *UserServiceUserInfoResult) GetSuccess() (v *UserInfoResp) {
	if !p.IsSetSuccess() {
		return UserServiceUserInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserInfoResp)
}

func (p *UserServiceUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserInfoResult(%+v)", *p)
}

var fieldIDToName_UserServiceUserInfoResult = map[int16]string{
	0: "success",
}
