// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package websocket

import (
	"LiveLive/kitex_gen/livelive/base"
	"context"
	"fmt"
)

type BroadcastToCourseReq struct {
	CourseId int64  `thrift:"course_id,1" frugal:"1,default,i64" json:"course_id"`
	Data     []byte `thrift:"data,2" frugal:"2,default,binary" json:"data"`
}

func NewBroadcastToCourseReq() *BroadcastToCourseReq {
	return &BroadcastToCourseReq{}
}

func (p *BroadcastToCourseReq) InitDefault() {
}

func (p *BroadcastToCourseReq) GetCourseId() (v int64) {
	return p.CourseId
}

func (p *BroadcastToCourseReq) GetData() (v []byte) {
	return p.Data
}
func (p *BroadcastToCourseReq) SetCourseId(val int64) {
	p.CourseId = val
}
func (p *BroadcastToCourseReq) SetData(val []byte) {
	p.Data = val
}

func (p *BroadcastToCourseReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BroadcastToCourseReq(%+v)", *p)
}

var fieldIDToName_BroadcastToCourseReq = map[int16]string{
	1: "course_id",
	2: "data",
}

type AggregateAnswersReq struct {
	QuestionId    int64 `thrift:"question_id,1" frugal:"1,default,i64" json:"question_id"`
	CourseId      int64 `thrift:"course_id,2" frugal:"2,default,i64" json:"course_id"`
	CorrectAnswer int8  `thrift:"correct_answer,3" frugal:"3,default,i8" json:"correct_answer"`
}

func NewAggregateAnswersReq() *AggregateAnswersReq {
	return &AggregateAnswersReq{}
}

func (p *AggregateAnswersReq) InitDefault() {
}

func (p *AggregateAnswersReq) GetQuestionId() (v int64) {
	return p.QuestionId
}

func (p *AggregateAnswersReq) GetCourseId() (v int64) {
	return p.CourseId
}

func (p *AggregateAnswersReq) GetCorrectAnswer() (v int8) {
	return p.CorrectAnswer
}
func (p *AggregateAnswersReq) SetQuestionId(val int64) {
	p.QuestionId = val
}
func (p *AggregateAnswersReq) SetCourseId(val int64) {
	p.CourseId = val
}
func (p *AggregateAnswersReq) SetCorrectAnswer(val int8) {
	p.CorrectAnswer = val
}

func (p *AggregateAnswersReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AggregateAnswersReq(%+v)", *p)
}

var fieldIDToName_AggregateAnswersReq = map[int16]string{
	1: "question_id",
	2: "course_id",
	3: "correct_answer",
}

type BroadcastToCourseResp struct {
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewBroadcastToCourseResp() *BroadcastToCourseResp {
	return &BroadcastToCourseResp{}
}

func (p *BroadcastToCourseResp) InitDefault() {
}

var BroadcastToCourseResp_BaseResp_DEFAULT *base.BaseResp

func (p *BroadcastToCourseResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return BroadcastToCourseResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BroadcastToCourseResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *BroadcastToCourseResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BroadcastToCourseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BroadcastToCourseResp(%+v)", *p)
}

var fieldIDToName_BroadcastToCourseResp = map[int16]string{
	255: "baseResp",
}

type AggregateAnswersResp struct {
	Accuracy float64 `thrift:"accuracy,1" frugal:"1,default,double" json:"accuracy"`
}

func NewAggregateAnswersResp() *AggregateAnswersResp {
	return &AggregateAnswersResp{}
}

func (p *AggregateAnswersResp) InitDefault() {
}

func (p *AggregateAnswersResp) GetAccuracy() (v float64) {
	return p.Accuracy
}
func (p *AggregateAnswersResp) SetAccuracy(val float64) {
	p.Accuracy = val
}

func (p *AggregateAnswersResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AggregateAnswersResp(%+v)", *p)
}

var fieldIDToName_AggregateAnswersResp = map[int16]string{
	1: "accuracy",
}

type CountRegisterReq struct {
	CourseId int64 `thrift:"course_id,1" frugal:"1,default,i64" json:"course_id"`
}

func NewCountRegisterReq() *CountRegisterReq {
	return &CountRegisterReq{}
}

func (p *CountRegisterReq) InitDefault() {
}

func (p *CountRegisterReq) GetCourseId() (v int64) {
	return p.CourseId
}
func (p *CountRegisterReq) SetCourseId(val int64) {
	p.CourseId = val
}

func (p *CountRegisterReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CountRegisterReq(%+v)", *p)
}

var fieldIDToName_CountRegisterReq = map[int16]string{
	1: "course_id",
}

type CountRegisterResp struct {
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewCountRegisterResp() *CountRegisterResp {
	return &CountRegisterResp{}
}

func (p *CountRegisterResp) InitDefault() {
}

var CountRegisterResp_BaseResp_DEFAULT *base.BaseResp

func (p *CountRegisterResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return CountRegisterResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CountRegisterResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *CountRegisterResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CountRegisterResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CountRegisterResp(%+v)", *p)
}

var fieldIDToName_CountRegisterResp = map[int16]string{
	255: "baseResp",
}

type WebsocketService interface {
	BroadcastToCourse(ctx context.Context, req *BroadcastToCourseReq) (r *BroadcastToCourseResp, err error)

	AggregateAnswers(ctx context.Context, req *AggregateAnswersReq) (r *AggregateAnswersResp, err error)

	CountRegister(ctx context.Context, req *CountRegisterReq) (r *CountRegisterResp, err error)
}

type WebsocketServiceBroadcastToCourseArgs struct {
	Req *BroadcastToCourseReq `thrift:"req,1" frugal:"1,default,BroadcastToCourseReq" json:"req"`
}

func NewWebsocketServiceBroadcastToCourseArgs() *WebsocketServiceBroadcastToCourseArgs {
	return &WebsocketServiceBroadcastToCourseArgs{}
}

func (p *WebsocketServiceBroadcastToCourseArgs) InitDefault() {
}

var WebsocketServiceBroadcastToCourseArgs_Req_DEFAULT *BroadcastToCourseReq

func (p *WebsocketServiceBroadcastToCourseArgs) GetReq() (v *BroadcastToCourseReq) {
	if !p.IsSetReq() {
		return WebsocketServiceBroadcastToCourseArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *WebsocketServiceBroadcastToCourseArgs) SetReq(val *BroadcastToCourseReq) {
	p.Req = val
}

func (p *WebsocketServiceBroadcastToCourseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WebsocketServiceBroadcastToCourseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WebsocketServiceBroadcastToCourseArgs(%+v)", *p)
}

var fieldIDToName_WebsocketServiceBroadcastToCourseArgs = map[int16]string{
	1: "req",
}

type WebsocketServiceBroadcastToCourseResult struct {
	Success *BroadcastToCourseResp `thrift:"success,0,optional" frugal:"0,optional,BroadcastToCourseResp" json:"success,omitempty"`
}

func NewWebsocketServiceBroadcastToCourseResult() *WebsocketServiceBroadcastToCourseResult {
	return &WebsocketServiceBroadcastToCourseResult{}
}

func (p *WebsocketServiceBroadcastToCourseResult) InitDefault() {
}

var WebsocketServiceBroadcastToCourseResult_Success_DEFAULT *BroadcastToCourseResp

func (p *WebsocketServiceBroadcastToCourseResult) GetSuccess() (v *BroadcastToCourseResp) {
	if !p.IsSetSuccess() {
		return WebsocketServiceBroadcastToCourseResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WebsocketServiceBroadcastToCourseResult) SetSuccess(x interface{}) {
	p.Success = x.(*BroadcastToCourseResp)
}

func (p *WebsocketServiceBroadcastToCourseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WebsocketServiceBroadcastToCourseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WebsocketServiceBroadcastToCourseResult(%+v)", *p)
}

var fieldIDToName_WebsocketServiceBroadcastToCourseResult = map[int16]string{
	0: "success",
}

type WebsocketServiceAggregateAnswersArgs struct {
	Req *AggregateAnswersReq `thrift:"req,1" frugal:"1,default,AggregateAnswersReq" json:"req"`
}

func NewWebsocketServiceAggregateAnswersArgs() *WebsocketServiceAggregateAnswersArgs {
	return &WebsocketServiceAggregateAnswersArgs{}
}

func (p *WebsocketServiceAggregateAnswersArgs) InitDefault() {
}

var WebsocketServiceAggregateAnswersArgs_Req_DEFAULT *AggregateAnswersReq

func (p *WebsocketServiceAggregateAnswersArgs) GetReq() (v *AggregateAnswersReq) {
	if !p.IsSetReq() {
		return WebsocketServiceAggregateAnswersArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *WebsocketServiceAggregateAnswersArgs) SetReq(val *AggregateAnswersReq) {
	p.Req = val
}

func (p *WebsocketServiceAggregateAnswersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WebsocketServiceAggregateAnswersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WebsocketServiceAggregateAnswersArgs(%+v)", *p)
}

var fieldIDToName_WebsocketServiceAggregateAnswersArgs = map[int16]string{
	1: "req",
}

type WebsocketServiceAggregateAnswersResult struct {
	Success *AggregateAnswersResp `thrift:"success,0,optional" frugal:"0,optional,AggregateAnswersResp" json:"success,omitempty"`
}

func NewWebsocketServiceAggregateAnswersResult() *WebsocketServiceAggregateAnswersResult {
	return &WebsocketServiceAggregateAnswersResult{}
}

func (p *WebsocketServiceAggregateAnswersResult) InitDefault() {
}

var WebsocketServiceAggregateAnswersResult_Success_DEFAULT *AggregateAnswersResp

func (p *WebsocketServiceAggregateAnswersResult) GetSuccess() (v *AggregateAnswersResp) {
	if !p.IsSetSuccess() {
		return WebsocketServiceAggregateAnswersResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WebsocketServiceAggregateAnswersResult) SetSuccess(x interface{}) {
	p.Success = x.(*AggregateAnswersResp)
}

func (p *WebsocketServiceAggregateAnswersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WebsocketServiceAggregateAnswersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WebsocketServiceAggregateAnswersResult(%+v)", *p)
}

var fieldIDToName_WebsocketServiceAggregateAnswersResult = map[int16]string{
	0: "success",
}

type WebsocketServiceCountRegisterArgs struct {
	Req *CountRegisterReq `thrift:"req,1" frugal:"1,default,CountRegisterReq" json:"req"`
}

func NewWebsocketServiceCountRegisterArgs() *WebsocketServiceCountRegisterArgs {
	return &WebsocketServiceCountRegisterArgs{}
}

func (p *WebsocketServiceCountRegisterArgs) InitDefault() {
}

var WebsocketServiceCountRegisterArgs_Req_DEFAULT *CountRegisterReq

func (p *WebsocketServiceCountRegisterArgs) GetReq() (v *CountRegisterReq) {
	if !p.IsSetReq() {
		return WebsocketServiceCountRegisterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *WebsocketServiceCountRegisterArgs) SetReq(val *CountRegisterReq) {
	p.Req = val
}

func (p *WebsocketServiceCountRegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WebsocketServiceCountRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WebsocketServiceCountRegisterArgs(%+v)", *p)
}

var fieldIDToName_WebsocketServiceCountRegisterArgs = map[int16]string{
	1: "req",
}

type WebsocketServiceCountRegisterResult struct {
	Success *CountRegisterResp `thrift:"success,0,optional" frugal:"0,optional,CountRegisterResp" json:"success,omitempty"`
}

func NewWebsocketServiceCountRegisterResult() *WebsocketServiceCountRegisterResult {
	return &WebsocketServiceCountRegisterResult{}
}

func (p *WebsocketServiceCountRegisterResult) InitDefault() {
}

var WebsocketServiceCountRegisterResult_Success_DEFAULT *CountRegisterResp

func (p *WebsocketServiceCountRegisterResult) GetSuccess() (v *CountRegisterResp) {
	if !p.IsSetSuccess() {
		return WebsocketServiceCountRegisterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WebsocketServiceCountRegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*CountRegisterResp)
}

func (p *WebsocketServiceCountRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WebsocketServiceCountRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WebsocketServiceCountRegisterResult(%+v)", *p)
}

var fieldIDToName_WebsocketServiceCountRegisterResult = map[int16]string{
	0: "success",
}
