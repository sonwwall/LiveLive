// Code generated by Kitex v0.13.1. DO NOT EDIT.

package liveservice

import (
	live "LiveLive/kitex_gen/livelive/live"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetStreamKey": kitex.NewMethodInfo(
		getStreamKeyHandler,
		newLiveServiceGetStreamKeyArgs,
		newLiveServiceGetStreamKeyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"WatchLive": kitex.NewMethodInfo(
		watchLiveHandler,
		newLiveServiceWatchLiveArgs,
		newLiveServiceWatchLiveResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"PublishRegister": kitex.NewMethodInfo(
		publishRegisterHandler,
		newLiveServicePublishRegisterArgs,
		newLiveServicePublishRegisterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"StartRecording": kitex.NewMethodInfo(
		startRecordingHandler,
		newLiveServiceStartRecordingArgs,
		newLiveServiceStartRecordingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"StopRecording": kitex.NewMethodInfo(
		stopRecordingHandler,
		newLiveServiceStopRecordingArgs,
		newLiveServiceStopRecordingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	liveServiceServiceInfo                = NewServiceInfo()
	liveServiceServiceInfoForClient       = NewServiceInfoForClient()
	liveServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return liveServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return liveServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return liveServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "LiveService"
	handlerType := (*live.LiveService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "live",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func getStreamKeyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*live.LiveServiceGetStreamKeyArgs)
	realResult := result.(*live.LiveServiceGetStreamKeyResult)
	success, err := handler.(live.LiveService).GetStreamKey(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLiveServiceGetStreamKeyArgs() interface{} {
	return live.NewLiveServiceGetStreamKeyArgs()
}

func newLiveServiceGetStreamKeyResult() interface{} {
	return live.NewLiveServiceGetStreamKeyResult()
}

func watchLiveHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*live.LiveServiceWatchLiveArgs)
	realResult := result.(*live.LiveServiceWatchLiveResult)
	success, err := handler.(live.LiveService).WatchLive(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLiveServiceWatchLiveArgs() interface{} {
	return live.NewLiveServiceWatchLiveArgs()
}

func newLiveServiceWatchLiveResult() interface{} {
	return live.NewLiveServiceWatchLiveResult()
}

func publishRegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*live.LiveServicePublishRegisterArgs)
	realResult := result.(*live.LiveServicePublishRegisterResult)
	success, err := handler.(live.LiveService).PublishRegister(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLiveServicePublishRegisterArgs() interface{} {
	return live.NewLiveServicePublishRegisterArgs()
}

func newLiveServicePublishRegisterResult() interface{} {
	return live.NewLiveServicePublishRegisterResult()
}

func startRecordingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*live.LiveServiceStartRecordingArgs)
	realResult := result.(*live.LiveServiceStartRecordingResult)
	success, err := handler.(live.LiveService).StartRecording(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLiveServiceStartRecordingArgs() interface{} {
	return live.NewLiveServiceStartRecordingArgs()
}

func newLiveServiceStartRecordingResult() interface{} {
	return live.NewLiveServiceStartRecordingResult()
}

func stopRecordingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*live.LiveServiceStopRecordingArgs)
	realResult := result.(*live.LiveServiceStopRecordingResult)
	success, err := handler.(live.LiveService).StopRecording(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLiveServiceStopRecordingArgs() interface{} {
	return live.NewLiveServiceStopRecordingArgs()
}

func newLiveServiceStopRecordingResult() interface{} {
	return live.NewLiveServiceStopRecordingResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetStreamKey(ctx context.Context, req *live.GetStreamKeyReq) (r *live.GetStreamKeyResp, err error) {
	var _args live.LiveServiceGetStreamKeyArgs
	_args.Req = req
	var _result live.LiveServiceGetStreamKeyResult
	if err = p.c.Call(ctx, "GetStreamKey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) WatchLive(ctx context.Context, req *live.WatchLiveReq) (r *live.WatchLiveResp, err error) {
	var _args live.LiveServiceWatchLiveArgs
	_args.Req = req
	var _result live.LiveServiceWatchLiveResult
	if err = p.c.Call(ctx, "WatchLive", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishRegister(ctx context.Context, req *live.PublishRegisterReq) (r *live.PublishRegisterResp, err error) {
	var _args live.LiveServicePublishRegisterArgs
	_args.Req = req
	var _result live.LiveServicePublishRegisterResult
	if err = p.c.Call(ctx, "PublishRegister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StartRecording(ctx context.Context, req *live.StartRecordingReq) (r *live.StartRecordingResp, err error) {
	var _args live.LiveServiceStartRecordingArgs
	_args.Req = req
	var _result live.LiveServiceStartRecordingResult
	if err = p.c.Call(ctx, "StartRecording", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StopRecording(ctx context.Context, req *live.StopRecordingReq) (r *live.StopRecordingResp, err error) {
	var _args live.LiveServiceStopRecordingArgs
	_args.Req = req
	var _result live.LiveServiceStopRecordingResult
	if err = p.c.Call(ctx, "StopRecording", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
