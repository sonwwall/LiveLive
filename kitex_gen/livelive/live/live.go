// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package live

import (
	"LiveLive/kitex_gen/livelive/base"
	"context"
	"fmt"
)

type GetStreamKeyReq struct {
	TeacherId int64  `thrift:"teacher_id,1" frugal:"1,default,i64" json:"teacher_id"`
	Classname string `thrift:"classname,2" frugal:"2,default,string" json:"classname"`
}

func NewGetStreamKeyReq() *GetStreamKeyReq {
	return &GetStreamKeyReq{}
}

func (p *GetStreamKeyReq) InitDefault() {
}

func (p *GetStreamKeyReq) GetTeacherId() (v int64) {
	return p.TeacherId
}

func (p *GetStreamKeyReq) GetClassname() (v string) {
	return p.Classname
}
func (p *GetStreamKeyReq) SetTeacherId(val int64) {
	p.TeacherId = val
}
func (p *GetStreamKeyReq) SetClassname(val string) {
	p.Classname = val
}

func (p *GetStreamKeyReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetStreamKeyReq(%+v)", *p)
}

var fieldIDToName_GetStreamKeyReq = map[int16]string{
	1: "teacher_id",
	2: "classname",
}

type GetStreamKeyResp struct {
	RtmpUrl   string         `thrift:"rtmp_url,1" frugal:"1,default,string" json:"rtmp_url"`
	StreamKey string         `thrift:"stream_key,2" frugal:"2,default,string" json:"stream_key"`
	Base      *base.BaseResp `thrift:"base,255" frugal:"255,default,base.BaseResp" json:"base"`
}

func NewGetStreamKeyResp() *GetStreamKeyResp {
	return &GetStreamKeyResp{}
}

func (p *GetStreamKeyResp) InitDefault() {
}

func (p *GetStreamKeyResp) GetRtmpUrl() (v string) {
	return p.RtmpUrl
}

func (p *GetStreamKeyResp) GetStreamKey() (v string) {
	return p.StreamKey
}

var GetStreamKeyResp_Base_DEFAULT *base.BaseResp

func (p *GetStreamKeyResp) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return GetStreamKeyResp_Base_DEFAULT
	}
	return p.Base
}
func (p *GetStreamKeyResp) SetRtmpUrl(val string) {
	p.RtmpUrl = val
}
func (p *GetStreamKeyResp) SetStreamKey(val string) {
	p.StreamKey = val
}
func (p *GetStreamKeyResp) SetBase(val *base.BaseResp) {
	p.Base = val
}

func (p *GetStreamKeyResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetStreamKeyResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetStreamKeyResp(%+v)", *p)
}

var fieldIDToName_GetStreamKeyResp = map[int16]string{
	1:   "rtmp_url",
	2:   "stream_key",
	255: "base",
}

type LiveService interface {
	GetStreamKey(ctx context.Context, req *GetStreamKeyReq) (r *GetStreamKeyResp, err error)
}

type LiveServiceGetStreamKeyArgs struct {
	Req *GetStreamKeyReq `thrift:"req,1" frugal:"1,default,GetStreamKeyReq" json:"req"`
}

func NewLiveServiceGetStreamKeyArgs() *LiveServiceGetStreamKeyArgs {
	return &LiveServiceGetStreamKeyArgs{}
}

func (p *LiveServiceGetStreamKeyArgs) InitDefault() {
}

var LiveServiceGetStreamKeyArgs_Req_DEFAULT *GetStreamKeyReq

func (p *LiveServiceGetStreamKeyArgs) GetReq() (v *GetStreamKeyReq) {
	if !p.IsSetReq() {
		return LiveServiceGetStreamKeyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LiveServiceGetStreamKeyArgs) SetReq(val *GetStreamKeyReq) {
	p.Req = val
}

func (p *LiveServiceGetStreamKeyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LiveServiceGetStreamKeyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServiceGetStreamKeyArgs(%+v)", *p)
}

var fieldIDToName_LiveServiceGetStreamKeyArgs = map[int16]string{
	1: "req",
}

type LiveServiceGetStreamKeyResult struct {
	Success *GetStreamKeyResp `thrift:"success,0,optional" frugal:"0,optional,GetStreamKeyResp" json:"success,omitempty"`
}

func NewLiveServiceGetStreamKeyResult() *LiveServiceGetStreamKeyResult {
	return &LiveServiceGetStreamKeyResult{}
}

func (p *LiveServiceGetStreamKeyResult) InitDefault() {
}

var LiveServiceGetStreamKeyResult_Success_DEFAULT *GetStreamKeyResp

func (p *LiveServiceGetStreamKeyResult) GetSuccess() (v *GetStreamKeyResp) {
	if !p.IsSetSuccess() {
		return LiveServiceGetStreamKeyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LiveServiceGetStreamKeyResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetStreamKeyResp)
}

func (p *LiveServiceGetStreamKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LiveServiceGetStreamKeyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServiceGetStreamKeyResult(%+v)", *p)
}

var fieldIDToName_LiveServiceGetStreamKeyResult = map[int16]string{
	0: "success",
}
