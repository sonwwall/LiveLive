// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package live

import (
	"LiveLive/kitex_gen/livelive/base"
	"context"
	"fmt"
)

type GetStreamKeyReq struct {
	TeacherId int64  `thrift:"teacher_id,1" frugal:"1,default,i64" json:"teacher_id"`
	Classname string `thrift:"classname,2" frugal:"2,default,string" json:"classname"`
}

func NewGetStreamKeyReq() *GetStreamKeyReq {
	return &GetStreamKeyReq{}
}

func (p *GetStreamKeyReq) InitDefault() {
}

func (p *GetStreamKeyReq) GetTeacherId() (v int64) {
	return p.TeacherId
}

func (p *GetStreamKeyReq) GetClassname() (v string) {
	return p.Classname
}
func (p *GetStreamKeyReq) SetTeacherId(val int64) {
	p.TeacherId = val
}
func (p *GetStreamKeyReq) SetClassname(val string) {
	p.Classname = val
}

func (p *GetStreamKeyReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetStreamKeyReq(%+v)", *p)
}

var fieldIDToName_GetStreamKeyReq = map[int16]string{
	1: "teacher_id",
	2: "classname",
}

type GetStreamKeyResp struct {
	RtmpUrl   string         `thrift:"rtmp_url,1" frugal:"1,default,string" json:"rtmp_url"`
	StreamKey string         `thrift:"stream_key,2" frugal:"2,default,string" json:"stream_key"`
	BaseResp  *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewGetStreamKeyResp() *GetStreamKeyResp {
	return &GetStreamKeyResp{}
}

func (p *GetStreamKeyResp) InitDefault() {
}

func (p *GetStreamKeyResp) GetRtmpUrl() (v string) {
	return p.RtmpUrl
}

func (p *GetStreamKeyResp) GetStreamKey() (v string) {
	return p.StreamKey
}

var GetStreamKeyResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetStreamKeyResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetStreamKeyResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetStreamKeyResp) SetRtmpUrl(val string) {
	p.RtmpUrl = val
}
func (p *GetStreamKeyResp) SetStreamKey(val string) {
	p.StreamKey = val
}
func (p *GetStreamKeyResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetStreamKeyResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetStreamKeyResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetStreamKeyResp(%+v)", *p)
}

var fieldIDToName_GetStreamKeyResp = map[int16]string{
	1:   "rtmp_url",
	2:   "stream_key",
	255: "baseResp",
}

type WatchLiveReq struct {
	Classname   string `thrift:"classname,1" frugal:"1,default,string" json:"classname"`
	StudentId   int64  `thrift:"student_id,2" frugal:"2,default,i64" json:"student_id"`
	TeacherName string `thrift:"teacher_name,3" frugal:"3,default,string" json:"teacher_name"`
}

func NewWatchLiveReq() *WatchLiveReq {
	return &WatchLiveReq{}
}

func (p *WatchLiveReq) InitDefault() {
}

func (p *WatchLiveReq) GetClassname() (v string) {
	return p.Classname
}

func (p *WatchLiveReq) GetStudentId() (v int64) {
	return p.StudentId
}

func (p *WatchLiveReq) GetTeacherName() (v string) {
	return p.TeacherName
}
func (p *WatchLiveReq) SetClassname(val string) {
	p.Classname = val
}
func (p *WatchLiveReq) SetStudentId(val int64) {
	p.StudentId = val
}
func (p *WatchLiveReq) SetTeacherName(val string) {
	p.TeacherName = val
}

func (p *WatchLiveReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WatchLiveReq(%+v)", *p)
}

var fieldIDToName_WatchLiveReq = map[int16]string{
	1: "classname",
	2: "student_id",
	3: "teacher_name",
}

type WatchLiveResp struct {
	Addr     string         `thrift:"Addr,1" frugal:"1,default,string" json:"Addr"`
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewWatchLiveResp() *WatchLiveResp {
	return &WatchLiveResp{}
}

func (p *WatchLiveResp) InitDefault() {
}

func (p *WatchLiveResp) GetAddr() (v string) {
	return p.Addr
}

var WatchLiveResp_BaseResp_DEFAULT *base.BaseResp

func (p *WatchLiveResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return WatchLiveResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *WatchLiveResp) SetAddr(val string) {
	p.Addr = val
}
func (p *WatchLiveResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *WatchLiveResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *WatchLiveResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WatchLiveResp(%+v)", *p)
}

var fieldIDToName_WatchLiveResp = map[int16]string{
	1:   "Addr",
	255: "baseResp",
}

type PublishRegisterReq struct {
	TeacherId   int64  `thrift:"teacher_id,1" frugal:"1,default,i64" json:"teacher_id"`
	Classname   string `thrift:"classname,2" frugal:"2,default,string" json:"classname"`
	TeacherName string `thrift:"teacher_name,3" frugal:"3,default,string" json:"teacher_name"`
	Deadline    int64  `thrift:"deadline,4" frugal:"4,default,i64" json:"deadline"`
}

func NewPublishRegisterReq() *PublishRegisterReq {
	return &PublishRegisterReq{}
}

func (p *PublishRegisterReq) InitDefault() {
}

func (p *PublishRegisterReq) GetTeacherId() (v int64) {
	return p.TeacherId
}

func (p *PublishRegisterReq) GetClassname() (v string) {
	return p.Classname
}

func (p *PublishRegisterReq) GetTeacherName() (v string) {
	return p.TeacherName
}

func (p *PublishRegisterReq) GetDeadline() (v int64) {
	return p.Deadline
}
func (p *PublishRegisterReq) SetTeacherId(val int64) {
	p.TeacherId = val
}
func (p *PublishRegisterReq) SetClassname(val string) {
	p.Classname = val
}
func (p *PublishRegisterReq) SetTeacherName(val string) {
	p.TeacherName = val
}
func (p *PublishRegisterReq) SetDeadline(val int64) {
	p.Deadline = val
}

func (p *PublishRegisterReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublishRegisterReq(%+v)", *p)
}

var fieldIDToName_PublishRegisterReq = map[int16]string{
	1: "teacher_id",
	2: "classname",
	3: "teacher_name",
	4: "deadline",
}

type PublishRegisterResp struct {
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewPublishRegisterResp() *PublishRegisterResp {
	return &PublishRegisterResp{}
}

func (p *PublishRegisterResp) InitDefault() {
}

var PublishRegisterResp_BaseResp_DEFAULT *base.BaseResp

func (p *PublishRegisterResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return PublishRegisterResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *PublishRegisterResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *PublishRegisterResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *PublishRegisterResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublishRegisterResp(%+v)", *p)
}

var fieldIDToName_PublishRegisterResp = map[int16]string{
	255: "baseResp",
}

type StartRecordingReq struct {
	TeacherId int64  `thrift:"teacher_id,1" frugal:"1,default,i64" json:"teacher_id"`
	CourseId  int64  `thrift:"course_id,2" frugal:"2,default,i64" json:"course_id"`
	Classname string `thrift:"classname,3" frugal:"3,default,string" json:"classname"`
}

func NewStartRecordingReq() *StartRecordingReq {
	return &StartRecordingReq{}
}

func (p *StartRecordingReq) InitDefault() {
}

func (p *StartRecordingReq) GetTeacherId() (v int64) {
	return p.TeacherId
}

func (p *StartRecordingReq) GetCourseId() (v int64) {
	return p.CourseId
}

func (p *StartRecordingReq) GetClassname() (v string) {
	return p.Classname
}
func (p *StartRecordingReq) SetTeacherId(val int64) {
	p.TeacherId = val
}
func (p *StartRecordingReq) SetCourseId(val int64) {
	p.CourseId = val
}
func (p *StartRecordingReq) SetClassname(val string) {
	p.Classname = val
}

func (p *StartRecordingReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartRecordingReq(%+v)", *p)
}

var fieldIDToName_StartRecordingReq = map[int16]string{
	1: "teacher_id",
	2: "course_id",
	3: "classname",
}

type StartRecordingResp struct {
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewStartRecordingResp() *StartRecordingResp {
	return &StartRecordingResp{}
}

func (p *StartRecordingResp) InitDefault() {
}

var StartRecordingResp_BaseResp_DEFAULT *base.BaseResp

func (p *StartRecordingResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return StartRecordingResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *StartRecordingResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *StartRecordingResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *StartRecordingResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartRecordingResp(%+v)", *p)
}

var fieldIDToName_StartRecordingResp = map[int16]string{
	255: "baseResp",
}

type StopRecordingReq struct {
	TeacherId int64  `thrift:"teacher_id,1" frugal:"1,default,i64" json:"teacher_id"`
	CourseId  int64  `thrift:"course_id,2" frugal:"2,default,i64" json:"course_id"`
	Classname string `thrift:"classname,3" frugal:"3,default,string" json:"classname"`
}

func NewStopRecordingReq() *StopRecordingReq {
	return &StopRecordingReq{}
}

func (p *StopRecordingReq) InitDefault() {
}

func (p *StopRecordingReq) GetTeacherId() (v int64) {
	return p.TeacherId
}

func (p *StopRecordingReq) GetCourseId() (v int64) {
	return p.CourseId
}

func (p *StopRecordingReq) GetClassname() (v string) {
	return p.Classname
}
func (p *StopRecordingReq) SetTeacherId(val int64) {
	p.TeacherId = val
}
func (p *StopRecordingReq) SetCourseId(val int64) {
	p.CourseId = val
}
func (p *StopRecordingReq) SetClassname(val string) {
	p.Classname = val
}

func (p *StopRecordingReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StopRecordingReq(%+v)", *p)
}

var fieldIDToName_StopRecordingReq = map[int16]string{
	1: "teacher_id",
	2: "course_id",
	3: "classname",
}

type StopRecordingResp struct {
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewStopRecordingResp() *StopRecordingResp {
	return &StopRecordingResp{}
}

func (p *StopRecordingResp) InitDefault() {
}

var StopRecordingResp_BaseResp_DEFAULT *base.BaseResp

func (p *StopRecordingResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return StopRecordingResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *StopRecordingResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *StopRecordingResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *StopRecordingResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StopRecordingResp(%+v)", *p)
}

var fieldIDToName_StopRecordingResp = map[int16]string{
	255: "baseResp",
}

type LiveService interface {
	GetStreamKey(ctx context.Context, req *GetStreamKeyReq) (r *GetStreamKeyResp, err error)

	WatchLive(ctx context.Context, req *WatchLiveReq) (r *WatchLiveResp, err error)

	PublishRegister(ctx context.Context, req *PublishRegisterReq) (r *PublishRegisterResp, err error)

	StartRecording(ctx context.Context, req *StartRecordingReq) (r *StartRecordingResp, err error)

	StopRecording(ctx context.Context, req *StopRecordingReq) (r *StopRecordingResp, err error)
}

type LiveServiceGetStreamKeyArgs struct {
	Req *GetStreamKeyReq `thrift:"req,1" frugal:"1,default,GetStreamKeyReq" json:"req"`
}

func NewLiveServiceGetStreamKeyArgs() *LiveServiceGetStreamKeyArgs {
	return &LiveServiceGetStreamKeyArgs{}
}

func (p *LiveServiceGetStreamKeyArgs) InitDefault() {
}

var LiveServiceGetStreamKeyArgs_Req_DEFAULT *GetStreamKeyReq

func (p *LiveServiceGetStreamKeyArgs) GetReq() (v *GetStreamKeyReq) {
	if !p.IsSetReq() {
		return LiveServiceGetStreamKeyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LiveServiceGetStreamKeyArgs) SetReq(val *GetStreamKeyReq) {
	p.Req = val
}

func (p *LiveServiceGetStreamKeyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LiveServiceGetStreamKeyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServiceGetStreamKeyArgs(%+v)", *p)
}

var fieldIDToName_LiveServiceGetStreamKeyArgs = map[int16]string{
	1: "req",
}

type LiveServiceGetStreamKeyResult struct {
	Success *GetStreamKeyResp `thrift:"success,0,optional" frugal:"0,optional,GetStreamKeyResp" json:"success,omitempty"`
}

func NewLiveServiceGetStreamKeyResult() *LiveServiceGetStreamKeyResult {
	return &LiveServiceGetStreamKeyResult{}
}

func (p *LiveServiceGetStreamKeyResult) InitDefault() {
}

var LiveServiceGetStreamKeyResult_Success_DEFAULT *GetStreamKeyResp

func (p *LiveServiceGetStreamKeyResult) GetSuccess() (v *GetStreamKeyResp) {
	if !p.IsSetSuccess() {
		return LiveServiceGetStreamKeyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LiveServiceGetStreamKeyResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetStreamKeyResp)
}

func (p *LiveServiceGetStreamKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LiveServiceGetStreamKeyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServiceGetStreamKeyResult(%+v)", *p)
}

var fieldIDToName_LiveServiceGetStreamKeyResult = map[int16]string{
	0: "success",
}

type LiveServiceWatchLiveArgs struct {
	Req *WatchLiveReq `thrift:"req,1" frugal:"1,default,WatchLiveReq" json:"req"`
}

func NewLiveServiceWatchLiveArgs() *LiveServiceWatchLiveArgs {
	return &LiveServiceWatchLiveArgs{}
}

func (p *LiveServiceWatchLiveArgs) InitDefault() {
}

var LiveServiceWatchLiveArgs_Req_DEFAULT *WatchLiveReq

func (p *LiveServiceWatchLiveArgs) GetReq() (v *WatchLiveReq) {
	if !p.IsSetReq() {
		return LiveServiceWatchLiveArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LiveServiceWatchLiveArgs) SetReq(val *WatchLiveReq) {
	p.Req = val
}

func (p *LiveServiceWatchLiveArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LiveServiceWatchLiveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServiceWatchLiveArgs(%+v)", *p)
}

var fieldIDToName_LiveServiceWatchLiveArgs = map[int16]string{
	1: "req",
}

type LiveServiceWatchLiveResult struct {
	Success *WatchLiveResp `thrift:"success,0,optional" frugal:"0,optional,WatchLiveResp" json:"success,omitempty"`
}

func NewLiveServiceWatchLiveResult() *LiveServiceWatchLiveResult {
	return &LiveServiceWatchLiveResult{}
}

func (p *LiveServiceWatchLiveResult) InitDefault() {
}

var LiveServiceWatchLiveResult_Success_DEFAULT *WatchLiveResp

func (p *LiveServiceWatchLiveResult) GetSuccess() (v *WatchLiveResp) {
	if !p.IsSetSuccess() {
		return LiveServiceWatchLiveResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LiveServiceWatchLiveResult) SetSuccess(x interface{}) {
	p.Success = x.(*WatchLiveResp)
}

func (p *LiveServiceWatchLiveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LiveServiceWatchLiveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServiceWatchLiveResult(%+v)", *p)
}

var fieldIDToName_LiveServiceWatchLiveResult = map[int16]string{
	0: "success",
}

type LiveServicePublishRegisterArgs struct {
	Req *PublishRegisterReq `thrift:"req,1" frugal:"1,default,PublishRegisterReq" json:"req"`
}

func NewLiveServicePublishRegisterArgs() *LiveServicePublishRegisterArgs {
	return &LiveServicePublishRegisterArgs{}
}

func (p *LiveServicePublishRegisterArgs) InitDefault() {
}

var LiveServicePublishRegisterArgs_Req_DEFAULT *PublishRegisterReq

func (p *LiveServicePublishRegisterArgs) GetReq() (v *PublishRegisterReq) {
	if !p.IsSetReq() {
		return LiveServicePublishRegisterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LiveServicePublishRegisterArgs) SetReq(val *PublishRegisterReq) {
	p.Req = val
}

func (p *LiveServicePublishRegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LiveServicePublishRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServicePublishRegisterArgs(%+v)", *p)
}

var fieldIDToName_LiveServicePublishRegisterArgs = map[int16]string{
	1: "req",
}

type LiveServicePublishRegisterResult struct {
	Success *PublishRegisterResp `thrift:"success,0,optional" frugal:"0,optional,PublishRegisterResp" json:"success,omitempty"`
}

func NewLiveServicePublishRegisterResult() *LiveServicePublishRegisterResult {
	return &LiveServicePublishRegisterResult{}
}

func (p *LiveServicePublishRegisterResult) InitDefault() {
}

var LiveServicePublishRegisterResult_Success_DEFAULT *PublishRegisterResp

func (p *LiveServicePublishRegisterResult) GetSuccess() (v *PublishRegisterResp) {
	if !p.IsSetSuccess() {
		return LiveServicePublishRegisterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LiveServicePublishRegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*PublishRegisterResp)
}

func (p *LiveServicePublishRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LiveServicePublishRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServicePublishRegisterResult(%+v)", *p)
}

var fieldIDToName_LiveServicePublishRegisterResult = map[int16]string{
	0: "success",
}

type LiveServiceStartRecordingArgs struct {
	Req *StartRecordingReq `thrift:"req,1" frugal:"1,default,StartRecordingReq" json:"req"`
}

func NewLiveServiceStartRecordingArgs() *LiveServiceStartRecordingArgs {
	return &LiveServiceStartRecordingArgs{}
}

func (p *LiveServiceStartRecordingArgs) InitDefault() {
}

var LiveServiceStartRecordingArgs_Req_DEFAULT *StartRecordingReq

func (p *LiveServiceStartRecordingArgs) GetReq() (v *StartRecordingReq) {
	if !p.IsSetReq() {
		return LiveServiceStartRecordingArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LiveServiceStartRecordingArgs) SetReq(val *StartRecordingReq) {
	p.Req = val
}

func (p *LiveServiceStartRecordingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LiveServiceStartRecordingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServiceStartRecordingArgs(%+v)", *p)
}

var fieldIDToName_LiveServiceStartRecordingArgs = map[int16]string{
	1: "req",
}

type LiveServiceStartRecordingResult struct {
	Success *StartRecordingResp `thrift:"success,0,optional" frugal:"0,optional,StartRecordingResp" json:"success,omitempty"`
}

func NewLiveServiceStartRecordingResult() *LiveServiceStartRecordingResult {
	return &LiveServiceStartRecordingResult{}
}

func (p *LiveServiceStartRecordingResult) InitDefault() {
}

var LiveServiceStartRecordingResult_Success_DEFAULT *StartRecordingResp

func (p *LiveServiceStartRecordingResult) GetSuccess() (v *StartRecordingResp) {
	if !p.IsSetSuccess() {
		return LiveServiceStartRecordingResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LiveServiceStartRecordingResult) SetSuccess(x interface{}) {
	p.Success = x.(*StartRecordingResp)
}

func (p *LiveServiceStartRecordingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LiveServiceStartRecordingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServiceStartRecordingResult(%+v)", *p)
}

var fieldIDToName_LiveServiceStartRecordingResult = map[int16]string{
	0: "success",
}

type LiveServiceStopRecordingArgs struct {
	Req *StopRecordingReq `thrift:"req,1" frugal:"1,default,StopRecordingReq" json:"req"`
}

func NewLiveServiceStopRecordingArgs() *LiveServiceStopRecordingArgs {
	return &LiveServiceStopRecordingArgs{}
}

func (p *LiveServiceStopRecordingArgs) InitDefault() {
}

var LiveServiceStopRecordingArgs_Req_DEFAULT *StopRecordingReq

func (p *LiveServiceStopRecordingArgs) GetReq() (v *StopRecordingReq) {
	if !p.IsSetReq() {
		return LiveServiceStopRecordingArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LiveServiceStopRecordingArgs) SetReq(val *StopRecordingReq) {
	p.Req = val
}

func (p *LiveServiceStopRecordingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LiveServiceStopRecordingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServiceStopRecordingArgs(%+v)", *p)
}

var fieldIDToName_LiveServiceStopRecordingArgs = map[int16]string{
	1: "req",
}

type LiveServiceStopRecordingResult struct {
	Success *StopRecordingResp `thrift:"success,0,optional" frugal:"0,optional,StopRecordingResp" json:"success,omitempty"`
}

func NewLiveServiceStopRecordingResult() *LiveServiceStopRecordingResult {
	return &LiveServiceStopRecordingResult{}
}

func (p *LiveServiceStopRecordingResult) InitDefault() {
}

var LiveServiceStopRecordingResult_Success_DEFAULT *StopRecordingResp

func (p *LiveServiceStopRecordingResult) GetSuccess() (v *StopRecordingResp) {
	if !p.IsSetSuccess() {
		return LiveServiceStopRecordingResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LiveServiceStopRecordingResult) SetSuccess(x interface{}) {
	p.Success = x.(*StopRecordingResp)
}

func (p *LiveServiceStopRecordingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LiveServiceStopRecordingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServiceStopRecordingResult(%+v)", *p)
}

var fieldIDToName_LiveServiceStopRecordingResult = map[int16]string{
	0: "success",
}
