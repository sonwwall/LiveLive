// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package course

import (
	"LiveLive/kitex_gen/livelive/base"
	"context"
	"fmt"
)

type CreateCourseReq struct {
	Classname   string `thrift:"classname,1" frugal:"1,default,string" json:"classname"`
	Description string `thrift:"description,2" frugal:"2,default,string" json:"description"`
	TeacherId   int64  `thrift:"teacher_id,3" frugal:"3,default,i64" json:"teacher_id"`
}

func NewCreateCourseReq() *CreateCourseReq {
	return &CreateCourseReq{}
}

func (p *CreateCourseReq) InitDefault() {
}

func (p *CreateCourseReq) GetClassname() (v string) {
	return p.Classname
}

func (p *CreateCourseReq) GetDescription() (v string) {
	return p.Description
}

func (p *CreateCourseReq) GetTeacherId() (v int64) {
	return p.TeacherId
}
func (p *CreateCourseReq) SetClassname(val string) {
	p.Classname = val
}
func (p *CreateCourseReq) SetDescription(val string) {
	p.Description = val
}
func (p *CreateCourseReq) SetTeacherId(val int64) {
	p.TeacherId = val
}

func (p *CreateCourseReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCourseReq(%+v)", *p)
}

var fieldIDToName_CreateCourseReq = map[int16]string{
	1: "classname",
	2: "description",
	3: "teacher_id",
}

type CreateCourseResp struct {
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewCreateCourseResp() *CreateCourseResp {
	return &CreateCourseResp{}
}

func (p *CreateCourseResp) InitDefault() {
}

var CreateCourseResp_BaseResp_DEFAULT *base.BaseResp

func (p *CreateCourseResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return CreateCourseResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateCourseResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *CreateCourseResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateCourseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCourseResp(%+v)", *p)
}

var fieldIDToName_CreateCourseResp = map[int16]string{
	255: "baseResp",
}

type CourseService interface {
	CreateCourse(ctx context.Context, req *CreateCourseReq) (r *CreateCourseResp, err error)
}

type CourseServiceCreateCourseArgs struct {
	Req *CreateCourseReq `thrift:"req,1" frugal:"1,default,CreateCourseReq" json:"req"`
}

func NewCourseServiceCreateCourseArgs() *CourseServiceCreateCourseArgs {
	return &CourseServiceCreateCourseArgs{}
}

func (p *CourseServiceCreateCourseArgs) InitDefault() {
}

var CourseServiceCreateCourseArgs_Req_DEFAULT *CreateCourseReq

func (p *CourseServiceCreateCourseArgs) GetReq() (v *CreateCourseReq) {
	if !p.IsSetReq() {
		return CourseServiceCreateCourseArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CourseServiceCreateCourseArgs) SetReq(val *CreateCourseReq) {
	p.Req = val
}

func (p *CourseServiceCreateCourseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CourseServiceCreateCourseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceCreateCourseArgs(%+v)", *p)
}

var fieldIDToName_CourseServiceCreateCourseArgs = map[int16]string{
	1: "req",
}

type CourseServiceCreateCourseResult struct {
	Success *CreateCourseResp `thrift:"success,0,optional" frugal:"0,optional,CreateCourseResp" json:"success,omitempty"`
}

func NewCourseServiceCreateCourseResult() *CourseServiceCreateCourseResult {
	return &CourseServiceCreateCourseResult{}
}

func (p *CourseServiceCreateCourseResult) InitDefault() {
}

var CourseServiceCreateCourseResult_Success_DEFAULT *CreateCourseResp

func (p *CourseServiceCreateCourseResult) GetSuccess() (v *CreateCourseResp) {
	if !p.IsSetSuccess() {
		return CourseServiceCreateCourseResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CourseServiceCreateCourseResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateCourseResp)
}

func (p *CourseServiceCreateCourseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CourseServiceCreateCourseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CourseServiceCreateCourseResult(%+v)", *p)
}

var fieldIDToName_CourseServiceCreateCourseResult = map[int16]string{
	0: "success",
}
